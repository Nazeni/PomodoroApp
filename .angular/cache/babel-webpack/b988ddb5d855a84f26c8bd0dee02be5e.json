{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport let PomodoroService = /*#__PURE__*/(() => {\n  class PomodoroService {\n    constructor(http) {\n      this.http = http;\n      this.pomodoros = new Array();\n    } // getPomodoros(): Observable<Pomodoro[]> {\n    //   console.log(\"Getting all pomodoros from the server\")\n    //   return this.http.get<Pomodoro[]>('/api')\n    //     .pipe(catchError(this.handleError<Pomodoro[]>('getPomodoros', [])))\n    //   //return this.pomodoros;\n    // }\n    // private handleError<T>(operation = 'operation', result?: T){\n    //   return (error:any): Observable<T> => {\n    //       console.error(error);\n    //       return of(result as T)\n    //   }\n    // }\n\n\n    getPomodoros() {\n      //return this.http.get<Pomodoro[]>('api/pomodoros');\n      return this.pomodoros;\n    }\n\n    getIndex(pomodoro) {\n      return this.pomodoros.indexOf(pomodoro);\n    } // addPomodoros(newPomodoro: Pomodoro): Observable<Pomodoro> {\n    //   this.pomodoros.push(newPomodoro)\n    //   return this.http.post<Pomodoro>('/api', newPomodoro, {\n    //     headers: new HttpHeaders({\n    //       'Content-type': 'application/json'\n    //     })\n    //   })\n    //   //this.pomodoros.push(newPomodoro)\n    //   // let index = this.pomodoros.length - 1\n    //   // return index;\n    // }\n\n\n    addPomodoros(newPomodoro) {\n      this.pomodoros.push(newPomodoro);\n      let index = this.pomodoros.length - 1;\n      return index;\n    }\n\n    deletePomodoro(id) {\n      this.pomodoros.splice(id, 1);\n    }\n\n    clearPomodoros(x) {\n      let d = confirm(`Are you sure you want to delete all tasks??`);\n\n      if (d === true) {\n        x = x.splice(0, x.length);\n      }\n    }\n\n    clearIsDone(x) {\n      x = x.filter(item => item.isDone === false);\n      return x;\n      console.log('pomodoros', x);\n    }\n\n    update(item, title, est, note) {\n      let index = this.getIndex(item);\n      let pomodoro = this.pomodoros[index];\n      pomodoro.title = title;\n      pomodoro.est = est;\n      pomodoro.note = note;\n      return pomodoro;\n    }\n\n  }\n\n  PomodoroService.ɵfac = function PomodoroService_Factory(t) {\n    return new (t || PomodoroService)(i0.ɵɵinject(i1.HttpClient));\n  };\n\n  PomodoroService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: PomodoroService,\n    factory: PomodoroService.ɵfac,\n    providedIn: 'root'\n  });\n  return PomodoroService;\n})();","map":null,"metadata":{},"sourceType":"module"}